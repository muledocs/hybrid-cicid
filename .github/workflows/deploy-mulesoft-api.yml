name: Deploy MuleSoft APIs

on:
  workflow_dispatch: # Allows manual triggering of the workflow
    inputs:
      artifact_name:
        description: 'Artifact name for deployment'
        required: false
        default: 'rafiq-hybrid-cicd'
      jar_file:
        description: 'JAR file name to deploy'
        required: false
        default: 'test2.jar'
  push:
    branches:
      - main

env:
  ANYPOINT_BASE_URL: "https://anypoint.mulesoft.com/hybrid/api/v1/applications"
  ORG_ID: "f75678aa-ba06-4a02-a863-17caa791761e"
  ENV_ID: "b126ed92-9bed-4496-8e31-160e24e375be"
  TARGET_ID: "51295947"
  ARTIFACT_NAME: ${{ github.event.inputs.artifact_name || 'rafiq-hybrid-cicd' }}
  JAR_FILE: ${{ github.event.inputs.jar_file || 'test2.jar' }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq

    - name: Validate JAR File
      run: |
        if [ ! -f "$JAR_FILE" ]; then
          echo "Error: JAR file '$JAR_FILE' not found in repository"
          exit 1
        fi
        echo "JAR file '$JAR_FILE' found and validated"

    - name: Generate Access Token
      id: generate-token
      run: |
        echo "Generating Access Token using Connected App credentials..."
        
        # Use GitHub secrets for credentials (recommended approach)
        CLIENT_ID="${{ secrets.MULESOFT_CLIENT_ID || '06c4c45cf75341509e5b9fb5497b7c2b' }}"
        CLIENT_SECRET="${{ secrets.MULESOFT_CLIENT_SECRET || 'B51af0A705864943B92692AFbB1CC2db' }}"
        
        response=$(curl -s --request POST "https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token" \
          --header "Content-Type: application/x-www-form-urlencoded" \
          --data-urlencode "client_id=$CLIENT_ID" \
          --data-urlencode "client_secret=$CLIENT_SECRET" \
          --data-urlencode "grant_type=client_credentials")
        
        # Check if token generation was successful
        if echo "$response" | jq -e '.access_token' > /dev/null 2>&1; then
          TOKEN=$(echo "$response" | jq -r '.access_token')
          echo "TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "Access token generated successfully"
        else
          echo "Error: Failed to generate access token"
          echo "Response: $response"
          exit 1
        fi

    - name: Check if API Exists
      id: check-api
      run: |
        echo "Checking if API '$ARTIFACT_NAME' already exists..."
        
        response=$(curl -s --request GET "$ANYPOINT_BASE_URL" \
          --header "Authorization: Bearer $TOKEN" \
          --header "X-ANYPNT-ORG-ID: $ORG_ID" \
          --header "X-ANYPNT-ENV-ID: $ENV_ID")
        
        # Check if API call was successful
        if echo "$response" | jq -e '.data' > /dev/null 2>&1; then
          echo "API list retrieved successfully"
          
          # Find API by artifact name
          api_id=$(echo "$response" | jq -r --arg ARTIFACT_NAME "$ARTIFACT_NAME" '.data[]? | select(.artifact.name == $ARTIFACT_NAME) | .id' | head -1)
          
          if [ -n "$api_id" ] && [ "$api_id" != "null" ]; then
            echo "API_EXISTS=true" >> $GITHUB_ENV
            echo "API_ID=$api_id" >> $GITHUB_ENV
            echo "API already exists with ID: $api_id"
          else
            echo "API_EXISTS=false" >> $GITHUB_ENV
            echo "API does not exist. Proceeding with new deployment."
          fi
        else
          echo "Error: Failed to retrieve API list"
          echo "Response: $response"
          exit 1
        fi

    - name: Update Existing API
      if: env.API_EXISTS == 'true'
      id: update-api
      run: |
        echo "Updating existing API with ID: $API_ID..."
        
        update_response=$(curl -s --request PUT "$ANYPOINT_BASE_URL/$API_ID" \
          --header "Authorization: Bearer $TOKEN" \
          --header "X-ANYPNT-ORG-ID: $ORG_ID" \
          --header "X-ANYPNT-ENV-ID: $ENV_ID" \
          --form "file=@$JAR_FILE" \
          --form "artifactName=$ARTIFACT_NAME" \
          --form "targetId=$TARGET_ID")
        
        # Check if update was successful
        if echo "$update_response" | jq -e '.id' > /dev/null 2>&1; then
          echo "API updated successfully"
          echo "Update response: $update_response"
        else
          echo "Error: Failed to update API"
          echo "Update response: $update_response"
          exit 1
        fi

    - name: Deploy New API
      if: env.API_EXISTS == 'false'
      id: deploy-api
      run: |
        echo "Deploying new MuleSoft API..."
        
        deploy_response=$(curl -s --request POST "$ANYPOINT_BASE_URL" \
          --header "Authorization: Bearer $TOKEN" \
          --header "X-ANYPNT-ORG-ID: $ORG_ID" \
          --header "X-ANYPNT-ENV-ID: $ENV_ID" \
          --form "file=@$JAR_FILE" \
          --form "artifactName=$ARTIFACT_NAME" \
          --form "targetId=$TARGET_ID")
        
        # Check if deployment was successful
        if echo "$deploy_response" | jq -e '.id' > /dev/null 2>&1; then
          echo "API deployed successfully"
          echo "Deploy response: $deploy_response"
        else
          echo "Error: Failed to deploy API"
          echo "Deploy response: $deploy_response"
          exit 1
        fi

    - name: Verify Deployment Status
      run: |
        echo "Verifying deployment status..."
        
        # Get the API ID from the previous step
        if [ "$API_EXISTS" = "true" ]; then
          api_id="$API_ID"
        else
          # Extract API ID from deploy response
          api_id=$(echo "$deploy_response" | jq -r '.id')
        fi
        
        if [ -n "$api_id" ] && [ "$api_id" != "null" ]; then
          echo "Checking deployment status for API ID: $api_id"
          
          status_response=$(curl -s --request GET "$ANYPOINT_BASE_URL/$api_id" \
            --header "Authorization: Bearer $TOKEN" \
            --header "X-ANYPNT-ORG-ID: $ORG_ID" \
            --header "X-ANYPNT-ENV-ID: $ENV_ID")
          
          if echo "$status_response" | jq -e '.status' > /dev/null 2>&1; then
            status=$(echo "$status_response" | jq -r '.status')
            echo "Deployment status: $status"
            
            if [ "$status" = "STARTED" ] || [ "$status" = "DEPLOYED" ]; then
              echo "✅ Deployment successful!"
            else
              echo "⚠️  Deployment status: $status"
            fi
          else
            echo "Could not retrieve deployment status"
          fi
        else
          echo "Could not determine API ID for status verification"
        fi

    - name: Deployment Summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifact Name**: $ARTIFACT_NAME" >> $GITHUB_STEP_SUMMARY
        echo "- **JAR File**: $JAR_FILE" >> $GITHUB_STEP_SUMMARY
        echo "- **Action**: $([ "$API_EXISTS" = "true" ] && echo "Updated existing API" || echo "Deployed new API")" >> $GITHUB_STEP_SUMMARY
        echo "- **API ID**: $([ "$API_EXISTS" = "true" ] && echo "$API_ID" || echo "New deployment")" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Completed successfully" >> $GITHUB_STEP_SUMMARY
