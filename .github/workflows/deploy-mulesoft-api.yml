name: Deploy MuleSoft APIs

on:
  workflow_dispatch: # Allows manual triggering of the workflow
  push:
    branches:
      - main

env:
  ANYPOINT_BASE_URL: "https://anypoint.mulesoft.com/hybrid/api/v1/applications" # Base URL for Anypoint Platform
  ORG_ID: "f75678aa-ba06-4a02-a863-17caa791761e" # Replace with your Organization ID
  ENV_ID: "b126ed92-9bed-4496-8e31-160e24e375be" # Replace with your Environment ID
  TARGET_ID: "51295947" # Replace with your Target ID
  ARTIFACT_NAME: "rafiq-hybrid-cicd" # Replace with your Artifact Name

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq

    - name: Generate Access Token
      id: generate-token
      run: |
        echo "Generating Access Token using Connected App credentials..."
        response=$(curl --request POST "https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token" \
          --header "Content-Type: application/x-www-form-urlencoded" \
          --data-urlencode "client_id=06c4c45cf75341509e5b9fb5497b7c2b" \
          --data-urlencode "client_secret=B51af0A705864943B92692AFbB1CC2db" \
          --data-urlencode "grant_type=client_credentials")
        
        token=$(echo $response | jq -r '.access_token')
        if [ "$token" = "null" ] || [ -z "$token" ]; then
          echo "Failed to generate access token"
          echo "Response: $response"
          exit 1
        fi
        echo "TOKEN=$token" >> $GITHUB_ENV
        echo "‚úÖ Access token generated successfully"

    - name: Check Existing Applications
      id: check-app
      run: |
        echo "üîç Checking for existing applications..."
        
        response=$(curl -s --request GET "$ANYPOINT_BASE_URL" \
          --header "Authorization: Bearer $TOKEN" \
          --header "X-ANYPNT-ORG-ID: $ORG_ID" \
          --header "X-ANYPNT-ENV-ID: $ENV_ID" \
          --header "Content-Type: application/json")
        
        echo "Applications API Response: $response"
        
        # Check if the response contains data array
        if echo "$response" | jq -e '.data' > /dev/null 2>&1; then
          # Look for existing application with same artifact name
          existing_app=$(echo "$response" | jq -r ".data[] | select(.artifactName == \"$ARTIFACT_NAME\")")
          
          if [ -n "$existing_app" ] && [ "$existing_app" != "null" ]; then
            app_id=$(echo "$existing_app" | jq -r '.id')
            app_status=$(echo "$existing_app" | jq -r '.status')
            echo "üì¶ Found existing application:"
            echo "   - ID: $app_id" 
            echo "   - Status: $app_status"
            echo "   - Artifact: $ARTIFACT_NAME"
            echo "APP_EXISTS=true" >> $GITHUB_ENV
            echo "APP_ID=$app_id" >> $GITHUB_ENV
            echo "DEPLOYMENT_ACTION=redeploy" >> $GITHUB_ENV
          else
            echo "üì¶ No existing application found with name: $ARTIFACT_NAME"
            echo "APP_EXISTS=false" >> $GITHUB_ENV
            echo "DEPLOYMENT_ACTION=new" >> $GITHUB_ENV
          fi
        else
          echo "‚ö†Ô∏è Unexpected API response format. Proceeding with new deployment."
          echo "APP_EXISTS=false" >> $GITHUB_ENV
          echo "DEPLOYMENT_ACTION=new" >> $GITHUB_ENV
        fi

    - name: Stop Existing Application (for safe redeployment)
      if: env.APP_EXISTS == 'true'
      run: |
        echo "‚è∏Ô∏è Stopping existing application for safe redeployment..."
        
        stop_response=$(curl -s --request POST "$ANYPOINT_BASE_URL/$APP_ID/status" \
          --header "Authorization: Bearer $TOKEN" \
          --header "X-ANYPNT-ORG-ID: $ORG_ID" \
          --header "X-ANYPNT-ENV-ID: $ENV_ID" \
          --header "Content-Type: application/json" \
          --data '{"status": "STOP"}')
        
        echo "Stop response: $stop_response"
        
        # Wait for application to stop
        echo "‚è≥ Waiting for application to stop..."
        sleep 15

    - name: Deploy/Redeploy Application
      run: |
        if [ "$DEPLOYMENT_ACTION" = "redeploy" ]; then
          echo "üöÄ Redeploying existing application..."
          method="PUT"
          url="$ANYPOINT_BASE_URL/$APP_ID"
        else
          echo "üöÄ Deploying new application..."
          method="POST"
          url="$ANYPOINT_BASE_URL"
        fi
        
        echo "Using method: $method"
        echo "Using URL: $url"
        
        deployment_response=$(curl -s --request $method "$url" \
          --header "Authorization: Bearer $TOKEN" \
          --header "X-ANYPNT-ORG-ID: $ORG_ID" \
          --header "X-ANYPNT-ENV-ID: $ENV_ID" \
          --form "file=@test2.jar" \
          --form "artifactName=$ARTIFACT_NAME" \
          --form "targetId=$TARGET_ID")
        
        echo "Deployment response: $deployment_response"
        
        # Check for errors in response
        if echo "$deployment_response" | jq -e '.errors' > /dev/null 2>&1; then
          echo "‚ùå Deployment failed with errors:"
          echo "$deployment_response" | jq -r '.errors[].message'
          exit 1
        fi
        
        echo "‚úÖ Deployment request completed successfully!"

    - name: Wait and Verify Deployment
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 30
        
        # Check final status
        echo "üîç Verifying deployment status..."
        final_response=$(curl -s --request GET "$ANYPOINT_BASE_URL" \
          --header "Authorization: Bearer $TOKEN" \
          --header "X-ANYPNT-ORG-ID: $ORG_ID" \
          --header "X-ANYPNT-ENV-ID: $ENV_ID")
        
        final_status=$(echo "$final_response" | jq -r ".data[] | select(.artifactName == \"$ARTIFACT_NAME\") | .status")
        
        echo "üìä Final application status: $final_status"
        
        if [ "$final_status" = "STARTED" ]; then
          echo "‚úÖ Application deployed and running successfully!"
        elif [ "$final_status" = "STARTING" ]; then
          echo "üîÑ Application is starting up..."
        else
          echo "‚ö†Ô∏è Application status: $final_status"
          echo "Please check Runtime Manager for more details."
        fi
